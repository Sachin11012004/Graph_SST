// Adjacency Matrix -> Adjacency matrix ek 2D array hota hai jisme matrix[i][j] = 1 matlab edge hai i se j tak, warna 0.

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, m; // n = number of nodes, m = number of edges
    cin >> n >> m;

    vector<vector<int>> adjMatrix(n+1, vector<int>(n+1, 0));

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adjMatrix[u][v] = 1;
        adjMatrix[v][u] = 1; // agar graph undirected hai
    }

    cout << "Adjacency Matrix:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << adjMatrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}







//Adj List ->  Adjacency list ek array of vectors hota hai jisme har node ki connected nodes ki list store hoti hai.


#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> adjList(n+1);

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // agar graph undirected hai
    }

    cout << "Adjacency List:\n";
    for (int i = 1; i <= n; i++) {
        cout << i << " -> ";
        for (auto node : adjList[i]) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}




Operation	                    Adjacency Matrix	              Adjacency List                    // n->no of nodes    
Space                        	O(NÂ²)                          	O(Nodes + 2Edges)
Add edge                    	O(1)                          	O(1)
Check if edge exists	        O(1)                          	O(degree(u))                     // mtlb u->v  mtlb u ki degree u kitne se connected hai 
Iterate neighbors            	O(N)                          	O(degree(u))

